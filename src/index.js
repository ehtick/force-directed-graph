import {
  Group,
  Color,
  RepeatWrapping
} from 'three';
import { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer.js';
import { getPotSize } from './math.js';
import { positionsFragment, velocitiesFragment } from './shaders.js';

import { Points } from './points.js';
import { Links } from './links.js';
import { Registry } from './registry.js';

class ForceDirectedGraph extends Group {

  constructor(renderer, data) {

    super();

    const registry = new Registry(data.nodes);
    const size = getPotSize(Math.max(data.nodes.length, data.links.length));
    const gpgpu = new GPUComputationRenderer(size, size, renderer);

    const uniforms = {
      decay: { value: 1 },
      alpha: { value: 1 },
      is2D: { value: false },
      time: { value: 0 },
      size: { value: size },
      maxSpeed: { value: 10 },
      timeStep: { value: 1 },
      damping: { value: 0.7 },
      repulsion: { value: - 0.3 },
      springLength: { value: 2 },
      stiffness: { value: 0.1 },
      gravity: { value: 0.1 },
      nodeRadius: { value: 1 },
      nodeScale: { value: 8 },
      sizeAttenuation: { value: true },
      frustumSize: { value: 100 },
      linksInheritColor: { value: false },
      pointsInheritColor: { value: true },
      pointColor: { value: new Color(0.3, 0.3, 0.3) },
      linkColor: { value: new Color(0.9, 0.9, 0.9) },
      opacity: { value: 1 }
    };

    const textures = {
      positions: gpgpu.createTexture(),
      velocities: gpgpu.createTexture(),
      links: gpgpu.createTexture()
    };

    let k = 0;
    for (let i = 0; i < textures.positions.image.data.length; i+=4) {

      const v = 0;

      const x = Math.random() * 2 - 1;
      const y = Math.random() * 2 - 1;
      const z = Math.random() * 2 - 1;

      if (k < data.nodes.length) {

        const node = data.nodes[k];

        textures.positions.image.data[i + 0] =
          typeof node.x !== 'undefined' ? node.x : x;
        textures.positions.image.data[i + 1] =
          typeof node.y !== 'undefined' ? node.y : y;
        textures.positions.image.data[i + 2] =
          typeof node.z !== 'undefined' ? node.z : z;
        textures.positions.image.data[i + 3] = node.isStatic ? 1 : 0;

      } else {

        // Throw all outside "extraneous" nodes generated by texture far far away.
        textures.positions.image.data[i + 0] = uniforms.frustumSize.value * 10;
        textures.positions.image.data[i + 1] = uniforms.frustumSize.value * 10;
        textures.positions.image.data[i + 2] = uniforms.frustumSize.value * 10;
        textures.positions.image.data[i + 3] = uniforms.frustumSize.value * 10;

      }

      textures.velocities.image.data[i + 0] = v;
      textures.velocities.image.data[i + 1] = v;
      textures.velocities.image.data[i + 2] = 0;
      textures.velocities.image.data[i + 3] = 0;

      let i1, i2, uvx, uvy;

      if (k < data.links.length) {

        // Calculate uv look up for edge calculations
        i1 = registry.get(data.links[k].source);
        i2 = registry.get(data.links[k].target);

        data.links[k].sourceIndex = i1;
        data.links[k].targetIndex = i2;

        uvx = (i1 % size) / size;
        uvy = Math.floor(i1 / size) / size;

        textures.links.image.data[i + 0] = uvx;
        textures.links.image.data[i + 1] = uvy;

        uvx = (i2 % size) / size;
        uvy = Math.floor(i2 / size) / size;

        textures.links.image.data[i + 2] = uvx;
        textures.links.image.data[i + 3] = uvy;

      }

      k++;

    }

    const variables = {
      positions: gpgpu.addVariable('texturePositions', positionsFragment, textures.positions),
      velocities: gpgpu.addVariable('textureVelocities', velocitiesFragment, textures.velocities)
    };

    gpgpu.setVariableDependencies(variables.positions, [variables.positions, variables.velocities]);
    gpgpu.setVariableDependencies(variables.velocities, [variables.velocities, variables.positions]);

    variables.positions.material.uniforms.is2D = uniforms.is2D;
    variables.positions.material.uniforms.timeStep = uniforms.timeStep;

    variables.velocities.material.uniforms.alpha = uniforms.alpha;
    variables.velocities.material.uniforms.is2D = uniforms.is2D;
    variables.velocities.material.uniforms.size = uniforms.size;
    variables.velocities.material.uniforms.time = uniforms.time;
    variables.velocities.material.uniforms.nodeRadius = uniforms.nodeRadius;
    variables.velocities.material.uniforms.nodeAmount = { value: data.nodes.length };
    variables.velocities.material.uniforms.edgeAmount = { value: data.links.length };
    variables.velocities.material.uniforms.maxSpeed = uniforms.maxSpeed;
    variables.velocities.material.uniforms.timeStep = uniforms.timeStep;
    variables.velocities.material.uniforms.damping = uniforms.damping;
    variables.velocities.material.uniforms.repulsion = uniforms.repulsion;
    variables.velocities.material.uniforms.textureLinks = { value: textures.links };
    variables.velocities.material.uniforms.springLength = uniforms.springLength;
    variables.velocities.material.uniforms.stiffness = uniforms.stiffness;
    variables.velocities.material.uniforms.gravity = uniforms.gravity;

    variables.positions.wrapS = variables.positions.wrapT = RepeatWrapping;
    variables.velocities.wrapS = variables.velocities.wrapT = RepeatWrapping;

    const error = gpgpu.init();
    if (error) {
      console.error('ForceDirectedGraph', error);
    }

    const points = new Points(size, { uniforms, data });
    const links = new Links(points, { uniforms, data });

    this.add(points);
    this.add(links);

    points.renderOrder = links.renderOrder + 1;

    this.userData.gpgpu = gpgpu;
    this.userData.uniforms = uniforms;
    this.userData.textures = textures;
    this.userData.variables = variables;

  }

  static getPotSize = getPotSize;

  update(time) {

    const { gpgpu, variables, uniforms } = this.userData;

    uniforms.alpha.value *= uniforms.decay.value;

    variables.velocities.material.uniforms.time.value = time / 1000;
    gpgpu.compute();

    const texture = this.getTexture('positions');

    for (let i = 0; i < this.children.length; i++) {
      const child = this.children[i];
      child.material.uniforms.texturePositions.value = texture;
    }

    return this;

  }

  // Getters / Setters

  getUniforms() {
    return this.userData.uniforms;
  }

  getTexture(name) {
    const { gpgpu, variables } = this.userData;
    return gpgpu.getCurrentRenderTarget(variables[name]).texture;
  }

  getSize() {
    return this.userData.size;
  }

  setFrustumSize(size) {
    this.userData.frustumSize.value = size;
  }

  getNodeCount() {
    const { variables } = this.userData;
    return variables.velocities.material.uniforms.nodeAmount.value;
  }

  getEdgeCount() {
    const { variables } = this.userData;
    return variables.velocities.material.uniforms.edgeAmount.value;
  }

  setBlendMode(mode) {
    for (let i = 0; i < this.children.length; i++) {
      const child = this.children[i];
      child.material.blending = mode;
    }
  }

}

export { ForceDirectedGraph };
